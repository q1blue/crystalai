"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[4419],{4137:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>k});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=n.createContext({}),s=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},d=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),c=s(a),u=i,k=c["".concat(l,".").concat(u)]||c[u]||m[u]||o;return a?n.createElement(k,r(r({ref:t},d),{},{components:a})):n.createElement(k,r({ref:t},d))}));function k(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=a.length,r=new Array(o);r[0]=u;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[c]="string"==typeof e?e:i,r[1]=p;for(var s=2;s<o;s++)r[s]=a[s];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},2361:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>p,toc:()=>s});var n=a(7462),i=(a(7294),a(4137));const o={title:"ADT -package",sidebar_label:"package",sidebar_position:1},r=void 0,p={unversionedId:"building/air-developer-tool/commands/package",id:"building/air-developer-tool/commands/package",title:"ADT -package",description:"The -package command should be run from the main application directory. The command uses the following syntaxes:",source:"@site/docs/building/air-developer-tool/commands/package.md",sourceDirName:"building/air-developer-tool/commands",slug:"/building/air-developer-tool/commands/package",permalink:"/docs/building/air-developer-tool/commands/package",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/building/air-developer-tool/commands/package.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"ADT -package",sidebar_label:"package",sidebar_position:1},sidebar:"mainSidebar",previous:{title:"Overview",permalink:"/docs/building/air-developer-tool/commands/"},next:{title:"prepare",permalink:"/docs/building/air-developer-tool/commands/prepare"}},l={},s=[{value:"<code>AIR_SIGNING_OPTIONS</code>",id:"air_signing_options",level:3},{value:"<code>-migrate</code>",id:"-migrate",level:3},{value:"<code>-target</code>",id:"-target",level:3},{value:"<code>-sampler</code>",id:"-sampler",level:3},{value:"<code>-hideAneLibSymbols</code>",id:"-hideanelibsymbols",level:3},{value:"<code>-embedBitcode</code>",id:"-embedbitcode",level:3},{value:"<code>DEBUGGER_CONNECTION_OPTIONS</code>",id:"debugger_connection_options",level:3},{value:"<code>-airDownloadURL</code>",id:"-airdownloadurl",level:3},{value:"<code>NATIVE_SIGNING_OPTIONS</code>",id:"native_signing_options",level:3},{value:"<code>output</code>",id:"output",level:3},{value:"<code>app_descriptor</code>",id:"app_descriptor",level:3},{value:"<code>-platformsdk</code>",id:"-platformsdk",level:3},{value:"<code>-arch</code>",id:"-arch",level:3},{value:"<code>FILE_OPTIONS</code>",id:"file_options",level:3},{value:"<code>input_airi</code>",id:"input_airi",level:3},{value:"<code>input_air</code>",id:"input_air",level:3},{value:"<code>ANE_OPTIONS</code>",id:"ane_options",level:3},{value:"ADT -package command examples",id:"adt--package-command-examples",level:2}],d={toc:s},c="wrapper";function m(e){let{components:t,...a}=e;return(0,i.kt)(c,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"-package")," command should be run from the main application directory. The command uses the following syntaxes:"),(0,i.kt)("p",null,"Create an AIR package from the component application files:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"adt -package\n    AIR_SIGNING_OPTIONS\n    -target packageType\n    -sampler\n    \u2011hideAneLibSymbols\n    NATIVE_SIGNING_OPTIONS\n    output\n    app_descriptor\n    FILE_OPTIONS\n")),(0,i.kt)("p",null,"Create a native package from the component application files:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"adt -package\n    AIR_SIGNING_OPTIONS\n    -target packageType\n    DEBUGGER_CONNECTION_OPTIONS\n    -airDownloadURL URL\n    NATIVE_SIGNING_OPTIONS\n    output\n    app_descriptor\n    -platformsdk path\n    FILE_OPTIONS\n")),(0,i.kt)("p",null,"Create a native package that includes a native extension from the component application files:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"adt -package\n    AIR_SIGNING_OPTIONS\n    -migrate MIGRATION_SIGNING_OPTIONS\n    -target packageType\n    DEBUGGER_CONNECTION_OPTIONS\n    -airDownloadURL URL\n    NATIVE_SIGNING_OPTIONS\n    output\n    app_descriptor\n    -platformsdk path\n    FILE_OPTIONS\n")),(0,i.kt)("p",null,"Create a native package from an AIR or AIRI file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"adt -package\n    -target packageType\n    NATIVE_SIGNING_OPTIONS\n    output\n    input_package\n")),(0,i.kt)("p",null,"Create a native extension package from the component native extension files:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"adt -package\n    AIR_SIGNING_OPTIONS\n    -target ane\n    output\n    ANE_OPTIONS\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Note: You do not have to sign an ANE file, so the AIR_SIGNING_OPTIONS parameters are optional in this example.")),(0,i.kt)("h3",{id:"air_signing_options"},(0,i.kt)("inlineCode",{parentName:"h3"},"AIR_SIGNING_OPTIONS")),(0,i.kt)("p",null,"The AIR signing options identify the certificate used to sign an AIR installation file. The signing options are fully described in ",(0,i.kt)("a",{parentName:"p",href:"/docs/building/air-developer-tool/option-sets/code-signing-options"},"ADT code signing options"),"."),(0,i.kt)("h3",{id:"-migrate"},(0,i.kt)("inlineCode",{parentName:"h3"},"-migrate")),(0,i.kt)("p",null,"This flag specifies that the application is signed with a migration certificate in addition to the certificate specified in the ",(0,i.kt)("inlineCode",{parentName:"p"},"AIR_SIGNING_OPTIONS")," parameters. This flag is only valid if you are packaging a desktop application as a native installer and the application uses a native extension. In other cases an error occurs. The signing options for the migration certificate are specified as the ",(0,i.kt)("inlineCode",{parentName:"p"},"MIGRATION_SIGNING_OPTIONS")," parameters. Those signing options are fully described in ",(0,i.kt)("a",{parentName:"p",href:"/docs/building/air-developer-tool/option-sets/code-signing-options"},"ADT code signing options"),". Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"-migrate")," flag allows you to create an update for a desktop native installer application that uses a native extension and change the code signing certificate for the application, such as when the original certificate expires. For more information, see Signing an updated version of an AIR application."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"-migrate")," flag of the ",(0,i.kt)("inlineCode",{parentName:"p"},"-package")," command is available in AIR 3.6 and later."),(0,i.kt)("h3",{id:"-target"},(0,i.kt)("inlineCode",{parentName:"h3"},"-target")),(0,i.kt)("p",null,"The type of package to create. The supported package types are:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"- `air` \u2014 an AIR package. \u201cair\u201d is the default value and the `-target` flag does not need to be specified when creating AIR or AIRI files.\n- `airn` \u2014 a native application package for devices in the extended television profile.\n- `ane` \u2014an AIR native extension package\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Android package targets:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"apk")," \u2014 an Android package. A package produced with this target can only be installed on an Android device, not an emulator."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"apk\u2011captive\u2011runtime")," \u2014 an Android package that includes both the application and a captive version of the AIR runtime. A package produced with this target can only be installed on an Android device, not an emulator."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"apk-debug")," \u2014 an Android package with extra debugging information. (The SWF files in the application must also be compiled with debugging support.)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"apk-emulator")," \u2014 an Android package for use on an emulator without debugging support. (Use the apk-debug target to permit debugging on both emulators and devices.)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"apk-profile")," \u2014 an Android package that supports application performance and memory profiling."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"iOS package targets:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ipa-ad-hoc")," \u2014 an iOS package for ad hoc distribution."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ipa-app-store")," \u2014 an iOS package for Apple App store distribution."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ipa-debug")," \u2014 an iOS package with extra debugging information. (The SWF files in the application must also be compiled with debugging support.)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ipa-test")," \u2014 an iOS package compiled without optimization or debugging information."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ipa-debug-interpreter")," \u2014 functionally equivalent to a debug package, but compiles more quickly. However, the ActionScript bytecode is interpreted and not translated to machine code. As a result, code execution is slower in an interpreter package."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ipa-debug-interpreter-simulator")," \u2014 functionally equivalent to ipa-debug-interpreter, but packaged for the iOS simulator. Macintosh-only. If you use this option, you must also include the ",(0,i.kt)("inlineCode",{parentName:"li"},"-platformsdk")," option, specifying the path to the iOS Simulator SDK."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ipa-test-interpreter")," \u2014 functionally equivalent to a test package, but compiles more quickly. However, the ActionScript bytecode is interpreted and not translated to machine code. As a result, code execution is slower in an interpreter package."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ipa-test-interpreter-simulator")," \u2014 functionally equivalent to ",(0,i.kt)("inlineCode",{parentName:"li"},"ipa-test-interpreter"),", but packaged for the iOS simulator. Macintosh-only. If you use this option, you must also include the ",(0,i.kt)("inlineCode",{parentName:"li"},"-platformsdk")," option, specifying the path to the iOS Simulator SDK."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"native")," \u2014 a native desktop installer. The type of file produced is the native installation format of the operating system on which the command is run:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"EXE")," \u2014 Windows"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"DMG")," \u2014 Mac"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"DEB")," \u2014 Ubuntu Linux (AIR 2.6 or earlier)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"RPM")," \u2014 Fedora or OpenSuse Linux (AIR 2.6 or earlier)")))),(0,i.kt)("p",null,"For more information see ",(0,i.kt)("a",{parentName:"p",href:"/docs/tutorials/platform/desktop/packaging-native-installer"},"Packaging a desktop native installer"),"."),(0,i.kt)("h3",{id:"-sampler"},(0,i.kt)("inlineCode",{parentName:"h3"},"-sampler")),(0,i.kt)("p",null,"(iOS only, AIR 3.4 and higher) "),(0,i.kt)("p",null,"Enables the telemetry-based ActionScript sampler in iOS applications. Using this flag lets you profile the application with Adobe Scout. Although Scout can profile any Flash platform content, enabling detailed telemetry gives you deep insight into ActionScript function timing, DisplayList, Stage3D rendering and more. Note that using this flag will have a slight performance impact, so do not use it for production applications."),(0,i.kt)("h3",{id:"-hideanelibsymbols"},(0,i.kt)("inlineCode",{parentName:"h3"},"-hideAneLibSymbols")),(0,i.kt)("p",null,"(iOS only, AIR 3.4 and higher) "),(0,i.kt)("p",null,'Application developers can use multiple native extensions from multiple sources and if the ANEs share a common symbol name, ADT generates a "duplicate symbol in object file" error. In some cases, this error can even manifest itself as a crash at runtime. You can use the hideAneLibSymbols option to specify whether or not to make the ANE library\u2019s symbols visible only to that library\u2019s sources (yes) or visible globally (no):'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"yes")," \u2014 Hides ANE symbols, which resolves any unintended symbol conflict issues."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"no")," \u2014 (Default) Does not hide ANE symbols. This is the pre-AIR 3.4 behavior.")),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"We do not suggest usage of the ",(0,i.kt)("inlineCode",{parentName:"p"},"hideAneLibSymbols")," under any circumstances. It makes usage of shared libraries across extensions impossible. Most modern native extensions that rely on shared libraries will fail if this is enabled.")),(0,i.kt)("h3",{id:"-embedbitcode"},(0,i.kt)("inlineCode",{parentName:"h3"},"-embedBitcode")),(0,i.kt)("p",null,"(iOS/tvOS only, AIR 25 and higher) "),(0,i.kt)("p",null,"Application developers can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"embedBitcode")," option to specify whether or not to embed bitcode in their iOS/tvOS application by specifying ",(0,i.kt)("inlineCode",{parentName:"p"},"yes")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"no"),". The default value of this switch if not specified is ",(0,i.kt)("inlineCode",{parentName:"p"},"no"),". For tvOS default value is ",(0,i.kt)("inlineCode",{parentName:"p"},"yes")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"ipa-app-store")," target."),(0,i.kt)("h3",{id:"debugger_connection_options"},(0,i.kt)("inlineCode",{parentName:"h3"},"DEBUGGER_CONNECTION_OPTIONS")),(0,i.kt)("p",null,"The debugger connection options specify whether a debug package should attempt to connect to a remote debugger running on another computer or listen for a connection from a remote debugger. This set of options is only supported for mobile debug packages (targets ",(0,i.kt)("inlineCode",{parentName:"p"},"apk-debug")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"ipa-debug"),"). These options are described in ",(0,i.kt)("a",{parentName:"p",href:"/docs/building/air-developer-tool/option-sets/debugger-connection-options"},"Debugger connection options"),"."),(0,i.kt)("h3",{id:"-airdownloadurl"},(0,i.kt)("inlineCode",{parentName:"h3"},"-airDownloadURL")),(0,i.kt)("p",null,"Specifies an alternate URL for downloading and installing the AIR runtime on Android devices. If not specified, an AIR application will redirect the user to the AIR runtime on the Android Market if the runtime is not already installed."),(0,i.kt)("p",null,"If your application is distributed through an alternate marketplace (other than the Android Market administered by Google), then you might need to specify the URL for downloading the AIR runtime from that market. Some alternate markets do not allow applications to require a download from outside the market. This option is only supported for Android packages."),(0,i.kt)("admonition",{title:"Deprecated",type:"note"},(0,i.kt)("p",{parentName:"admonition"},"The shared runtime is no longer supported on Android.")),(0,i.kt)("h3",{id:"native_signing_options"},(0,i.kt)("inlineCode",{parentName:"h3"},"NATIVE_SIGNING_OPTIONS")),(0,i.kt)("p",null,"The native signing options identify the certificate used to sign a native package file. These signing options are used to apply a signature used by the native operating system, not the AIR runtime. The options are otherwise identical to the AIR_SIGNING_OPTIONS and are fully described in ",(0,i.kt)("a",{parentName:"p",href:"/docs/building/air-developer-tool/option-sets/code-signing-options"},"ADT code signing options"),"."),(0,i.kt)("p",null,"Native signatures are supported on Windows and Android. On Windows, both an AIR signing options and the native signing options should be specified. On Android, only the native signing options can be specified."),(0,i.kt)("p",null,"In many cases, you can use the same code signing certificate to apply both an AIR and a native signature. However, this is not true in all cases. For example, Google\u2019s policy for apps submitted to the Android Market dictates that all apps must be signed with a certificate valid until at least the year 2033. This means that a certificate issued by a well known certificate authority, which are recommended when applying an AIR signature, should not be used to sign an Android app. (No certificate authorities issue a code signing certificate with that long a validity period.)"),(0,i.kt)("h3",{id:"output"},(0,i.kt)("inlineCode",{parentName:"h3"},"output")),(0,i.kt)("p",null,"The name of the package file to create. Specifying the file extension is optional. If not specified, an extension appropriate to the ",(0,i.kt)("inlineCode",{parentName:"p"},"-target")," value and current operating system is added."),(0,i.kt)("h3",{id:"app_descriptor"},(0,i.kt)("inlineCode",{parentName:"h3"},"app_descriptor")),(0,i.kt)("p",null,"The path to the application descriptor file. The path can be specified relative to the current directory or as an absolute path. (The application descriptor file is renamed as ",(0,i.kt)("inlineCode",{parentName:"p"},"application.xml")," in the AIR file.)"),(0,i.kt)("h3",{id:"-platformsdk"},(0,i.kt)("inlineCode",{parentName:"h3"},"-platformsdk")),(0,i.kt)("p",null,"The path to the platform SDK for the target device:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Android")," - The AIR 2.6+ SDK includes the tools from the Android SDK needed to implement the relevant ADT commands. Only set this value to use a different version of the Android SDK. Also, the platform SDK path does not need to be supplied on the command line if the ",(0,i.kt)("inlineCode",{parentName:"p"},"AIR_ANDROID_SDK_HOME")," environment variable is already set. (If both are set, then the path provided on the command line is used.) ",(0,i.kt)("em",{parentName:"p"},"TODO:: Add adt.cfg details"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"iOS")," - The AIR SDK ships with a captive iOS SDK. The ",(0,i.kt)("inlineCode",{parentName:"p"},"-platformsdk")," option lets you package applications with an external SDK so that you are not restricted to using the captive iOS SDK. For example, if you have built an extension with the latest iOS SDK, you can specify that SDK when packaging your application. Additionally, when using ADT with the iOS Simulator, you must always include the ",(0,i.kt)("inlineCode",{parentName:"p"},"-platformsdk")," option, specifying the path to the iOS Simulator SDK."))),(0,i.kt)("h3",{id:"-arch"},(0,i.kt)("inlineCode",{parentName:"h3"},"-arch")),(0,i.kt)("p",null,"Application developers can use this argument to create an APK for a specific platform architecture, it takes following values:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"armv7")," - ADT packages an APK for the Android armv7 platform."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"armv8")," - ADT packages an APK for the Android armv8 platform."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"x86")," - ADT packages an APK for the Android Intel x86 platform."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"x64")," - ADT packages an APK for the Android Intel x64 platform."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"all"),' - ADT packages a "universal APK" containing all architectures.')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"armv7")," is the default value when no value is specified"),(0,i.kt)("h3",{id:"file_options"},(0,i.kt)("inlineCode",{parentName:"h3"},"FILE_OPTIONS")),(0,i.kt)("p",null,"Identifies the application files to include in the package. The file options are fully described in ",(0,i.kt)("a",{parentName:"p",href:"/docs/building/air-developer-tool/option-sets/file-and-path-options"},"File and path options"),". Do not specify file options when creating a native package from an AIR or AIRI file."),(0,i.kt)("h3",{id:"input_airi"},(0,i.kt)("inlineCode",{parentName:"h3"},"input_airi")),(0,i.kt)("p",null,"Specify when creating a native package from an AIRI file. The ",(0,i.kt)("inlineCode",{parentName:"p"},"AIR_SIGNING_OPTIONS")," are required if the target is ",(0,i.kt)("inlineCode",{parentName:"p"},"air")," (or no target is specified)."),(0,i.kt)("h3",{id:"input_air"},(0,i.kt)("inlineCode",{parentName:"h3"},"input_air")),(0,i.kt)("p",null,"Specify when creating a native package from an AIR file. Do not specify ",(0,i.kt)("inlineCode",{parentName:"p"},"AIR_SIGNING_OPTIONS"),"."),(0,i.kt)("h3",{id:"ane_options"},(0,i.kt)("inlineCode",{parentName:"h3"},"ANE_OPTIONS")),(0,i.kt)("p",null,"Identifies the options and files for creating a native extension package. The extension package options are fully described in ",(0,i.kt)("a",{parentName:"p",href:"/docs/building/air-developer-tool/option-sets/native-extension-options"},"Native extension options"),"."),(0,i.kt)("h2",{id:"adt--package-command-examples"},"ADT -package command examples"),(0,i.kt)("p",null,"Package specific application files in the current directory for a SWF-based AIR application:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"adt \u2013package -storetype pkcs12 -keystore cert.p12 myApp.air myApp.xml myApp.swf components.swc\n")),(0,i.kt)("p",null,"Package specific application files in the current directory for an HTML-based AIR application:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"adt \u2013package -storetype pkcs12 -keystore cert.p12 myApp.air myApp.xml myApp.html AIRAliases.js image.gif\n")),(0,i.kt)("p",null,"Package all files and subdirectories in the current working directory:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"adt \u2013package -storetype pkcs12 -keystore ../cert.p12 myApp.air myApp.xml .\n")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"The keystore file contains the private key used to sign your application. Never include the signing certificate inside the AIR package! If you use wildcards in the ADT command, place the keystore file in a different location so that it is not included in the package. In this example the keystore file, ",(0,i.kt)("inlineCode",{parentName:"p"},"cert.p12"),", resides in the parent directory.")),(0,i.kt)("p",null,"Package only the main files and an images subdirectory:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"adt \u2013package -storetype pkcs12 -keystore cert.p12 myApp.air myApp.xml myApp.swf images\n")),(0,i.kt)("p",null,"Package an HTML-based application and all files in the HTML, scripts, and images subdirectories:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"adt \u2013package -storetype pkcs12 -keystore cert.p12 myApp.air myApp.xml index.html AIRALiases.js html scripts images\n")),(0,i.kt)("p",null,"Package the ",(0,i.kt)("inlineCode",{parentName:"p"},"application.xml")," file and main SWF located in a working directory (",(0,i.kt)("inlineCode",{parentName:"p"},"release/bin"),"):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"adt \u2013package -storetype pkcs12 -keystore cert.p12 myApp.air release/bin/myApp.xml \u2013C release/bin myApp.swf\n")),(0,i.kt)("p",null,"Package assets from more than one place in your build file system. In this example, the application assets are located in the following folders before packaging:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"/devRoot\n    /myApp\n        /release\n            /bin\n                myApp-app.xml\n                myApp.swf or myApp.html\n    /artwork\n        /myApp\n            /images\n                image-1.png\n                ...\n                image-n.png\n    /libraries\n        /release\n            /libs\n                lib-1.swf\n                lib-2.swf\n                lib-a.js\n                AIRAliases.js\n")),(0,i.kt)("p",null,"Running the following ADT command from the /devRoot/myApp directory:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"adt \u2013package -storetype pkcs12 -keystore cert.p12 myApp.air release/bin/myApp-app.xml\n    \u2013C release/bin myApp.swf (or myApp.html)\n    \u2013C ../artwork/myApp images\n    \u2013C ../libraries/release libs\n")),(0,i.kt)("p",null,"Results in the following package structure:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"/myAppRoot\n    /META-INF\n        /AIR\n            application.xml\n            hash\n    myApp.swf or myApp.html\n    mimetype\n    /images\n        image-1.png\n        ...\n        image-n.png\n    /libs\n        lib-1.swf\n        lib-2.swf\n        lib-a.js\n        AIRAliases.js\n")),(0,i.kt)("p",null,"Run ADT as a Java program for a simple SWF-based application (without setting the classpath):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"java \u2013jar {AIRSDK}/lib/ADT.jar \u2013package -storetype pkcs12 -keystore cert.p12 myApp.air myApp.xml myApp.swf\n")),(0,i.kt)("p",null,"Run ADT as a Java program for a simple HTML-based application (without setting the classpath):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"java \u2013jar {AIRSDK}/lib/ADT.jar \u2013package -storetype pkcs12 -keystore cert.p12 myApp.air myApp.xml myApp.html AIRAliases.js\n")),(0,i.kt)("p",null,"Run ADT as a Java program (with the Java classpath set to include the ADT.jar package):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"java -com.adobe.air.ADT \u2013package -storetype pkcs12 -keystore cert.p12 myApp.air myApp.xml myApp.swf\n")),(0,i.kt)("p",null,"Run ADT as a Java task in Apache Ant (although it\u2019s usually best to use the ADT command directly in Ant scripts). The paths shown in the example are for Windows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'<property name="SDK_HOME" value="C:/AIRSDK"/>\n<property name="ADT.JAR" value="${SDK_HOME}/lib/adt.jar"/>\n\ntarget name="package">\n    <java jar="${ADT.JAR}" fork="true" failonerror="true">\n        <arg value="-package"/>\n        <arg value="-storetype"/>\n        <arg value="pkcs12"/>\n        <arg value="-keystore"/>\n        <arg value="../../ExampleCert.p12"/>\n        <arg value="myApp.air"/>\n        <arg value="myApp-app.xml"/>\n        <arg value="myApp.swf"/>\n        <arg value="icons/*.png"/>\n    </java>\n</target>\n')),(0,i.kt)("p",null,"For more on using ",(0,i.kt)("inlineCode",{parentName:"p"},"ant")," see the ",(0,i.kt)("a",{parentName:"p",href:"/docs/tools/building/ant/"},"Apache Ant documentation")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"On some computer systems, double-byte characters in the file system paths can be misinterpreted. If this occurs, try setting the JRE used to run ADT to use the UTF-8 character set. This is done by default in the script used to launch ADT on Mac and Linux. In the Windows ",(0,i.kt)("inlineCode",{parentName:"p"},"adt.bat")," file, or when you run ADT directly from Java, specify the ",(0,i.kt)("inlineCode",{parentName:"p"},"\u2011Dfile.encoding=UTF-8")," option on the Java command line.")))}m.isMDXComponent=!0}}]);