"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[6346],{4137:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var o=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=o.createContext({}),p=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=p(e.components);return o.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},g=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=p(n),g=i,m=d["".concat(c,".").concat(g)]||d[g]||u[g]||r;return n?o.createElement(m,a(a({ref:t},s),{},{components:n})):o.createElement(m,a({ref:t},s))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,a=new Array(r);a[0]=g;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[d]="string"==typeof e?e:i,a[1]=l;for(var p=2;p<r;p++)a[p]=n[p];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}g.displayName="MDXCreateElement"},7857:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var o=n(7462),i=(n(7294),n(4137));const r={title:"ADT Debugger connection options",sidebar_label:"Debugger connection",sidebar_position:3},a=void 0,l={unversionedId:"building/air-developer-tool/option-sets/debugger-connection-options",id:"building/air-developer-tool/option-sets/debugger-connection-options",title:"ADT Debugger connection options",description:"When the target of the package is apk-debug, ipa-debug, or ipa-debug-interpreter, the connection options can be used to specify whether the app will attempt to connect to a remote debugger (typically used for wifi debugging) or listen for an incoming connection from a remote debugger (typically used for USB debugging). Use the -connect option to connect to a debugger; use the -listen option to accept a connection from a debugger over a USB connection. These options are mutually exclusive; that is, you cannot use them together.",source:"@site/docs/building/air-developer-tool/option-sets/debugger-connection-options.md",sourceDirName:"building/air-developer-tool/option-sets",slug:"/building/air-developer-tool/option-sets/debugger-connection-options",permalink:"/docs/building/air-developer-tool/option-sets/debugger-connection-options",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/building/air-developer-tool/option-sets/debugger-connection-options.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"ADT Debugger connection options",sidebar_label:"Debugger connection",sidebar_position:3},sidebar:"mainSidebar",previous:{title:"File and path",permalink:"/docs/building/air-developer-tool/option-sets/file-and-path-options"},next:{title:"Android application profiling",permalink:"/docs/building/air-developer-tool/option-sets/android-application-profiling-options"}},c={},p=[{value:"Connect",id:"connect",level:2},{value:"<code>-connect</code>",id:"-connect",level:3},{value:"<code>hostString</code>",id:"hoststring",level:3},{value:"Listen",id:"listen",level:2},{value:"<code>-listen</code>",id:"-listen",level:3},{value:"<code>port</code>",id:"port",level:3}],s={toc:p},d="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,o.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"When the target of the package is ",(0,i.kt)("inlineCode",{parentName:"p"},"apk-debug"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"ipa-debug"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"ipa-debug-interpreter"),", the connection options can be used to specify whether the app will attempt to connect to a remote debugger (typically used for wifi debugging) or listen for an incoming connection from a remote debugger (typically used for USB debugging). Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"-connect")," option to connect to a debugger; use the ",(0,i.kt)("inlineCode",{parentName:"p"},"-listen")," option to accept a connection from a debugger over a USB connection. These options are mutually exclusive; that is, you cannot use them together."),(0,i.kt)("h2",{id:"connect"},"Connect"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"-connect")," option uses the following syntax:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"-connect hostString\n")),(0,i.kt)("h3",{id:"-connect"},(0,i.kt)("inlineCode",{parentName:"h3"},"-connect")),(0,i.kt)("p",null,"If present, the app will attempt to connect to a remote debugger."),(0,i.kt)("h3",{id:"hoststring"},(0,i.kt)("inlineCode",{parentName:"h3"},"hostString")),(0,i.kt)("p",null,"A string identifying the computer running the Flash debugging tool FDB. If not specified, the app will attempt to connect to a debugger running on the computer on which the package is created. The host string can be a fully qualified computer domain name: ",(0,i.kt)("inlineCode",{parentName:"p"},"machinename.subgroup.example.com"),", or an IP address: ",(0,i.kt)("inlineCode",{parentName:"p"},"192.168.4.122"),". If the specified (or default) machine cannot be found, then the runtime will display a dialog requesting a valid host name."),(0,i.kt)("h2",{id:"listen"},"Listen"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"-listen")," option uses the following syntax:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"-listen port\n")),(0,i.kt)("h3",{id:"-listen"},(0,i.kt)("inlineCode",{parentName:"h3"},"-listen")),(0,i.kt)("p",null,"If present, the runtime waits for a connection from a remote debugger."),(0,i.kt)("h3",{id:"port"},(0,i.kt)("inlineCode",{parentName:"h3"},"port")),(0,i.kt)("p",null,"(Optional)"),(0,i.kt)("p",null,"The port to listen on. By default, the runtime listens on port 7936. For more information on using the ",(0,i.kt)("inlineCode",{parentName:"p"},"-listen")," option, see ",(0,i.kt)("a",{parentName:"p",href:"https://help.adobe.com/en_US/air/build/WS901d38e593cd1bac7b2281cc12cd6bced97-8000.html"},"Remote debugging with FDB over USB"),"."))}u.isMDXComponent=!0}}]);