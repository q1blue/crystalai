"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[8276],{4137:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>y});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),d=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=d(e.components);return i.createElement(s.Provider,{value:t},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),p=d(n),m=a,y=p["".concat(s,".").concat(m)]||p[m]||h[m]||o;return n?i.createElement(y,l(l({ref:t},c),{},{components:n})):i.createElement(y,l({ref:t},c))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=m;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r[p]="string"==typeof e?e:a,l[1]=r;for(var d=2;d<o;d++)l[d]=n[d];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2871:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>d});var i=n(7462),a=(n(7294),n(4137));const o={title:"Working with display object containers",sidebar_position:4},l=void 0,r={unversionedId:"development/display/display-programming/working-with-display-objects/working-with-display-object-containers",id:"development/display/display-programming/working-with-display-objects/working-with-display-object-containers",title:"Working with display object containers",description:"If a DisplayObjectContainer object is deleted from the display list, or if it is moved or transformed in some other way, each display object in the DisplayObjectContainer is also deleted, moved, or transformed.",source:"@site/docs/development/display/display-programming/working-with-display-objects/working-with-display-object-containers.md",sourceDirName:"development/display/display-programming/working-with-display-objects",slug:"/development/display/display-programming/working-with-display-objects/working-with-display-object-containers",permalink:"/docs/development/display/display-programming/working-with-display-objects/working-with-display-object-containers",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/display/display-programming/working-with-display-objects/working-with-display-object-containers.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Working with display object containers",sidebar_position:4},sidebar:"mainSidebar",previous:{title:"Adding display objects to the display list",permalink:"/docs/development/display/display-programming/working-with-display-objects/adding-display-objects-to-the-display-list"},next:{title:"Traversing the display list",permalink:"/docs/development/display/display-programming/working-with-display-objects/traversing-the-display-list"}},s={},d=[],c={toc:d},p="wrapper";function h(e){let{components:t,...o}=e;return(0,a.kt)(p,(0,i.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"If a DisplayObjectContainer object is deleted from the display list, or if it is moved or transformed in some other way, each display object in the DisplayObjectContainer is also deleted, moved, or transformed."),(0,a.kt)("p",null,"A display object container is itself a type of display object\u2014it can be added to another display object container. For example, the following image shows a display object container, pictureScreen , that contains one outline shape and four other display object containers (of type PictureFrame):"),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(7902).Z,width:"200",height:"168"})),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"A. A shape defining the border of the pictureScreen display object container B. Four display object containers that are children of the pictureScreen object")),(0,a.kt)("p",null,"In order to have a display object appear in the display list, you must add it to a display object container that is on the display list. You do this by using the ",(0,a.kt)("inlineCode",{parentName:"p"},"addChild()")," method or the ",(0,a.kt)("inlineCode",{parentName:"p"},"addChildAt()")," method of the container object. For example, without the final line of the following code, the ",(0,a.kt)("inlineCode",{parentName:"p"},"myTextField")," object would not be displayed:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-actionscript"},'var myTextField:TextField = new TextField();\nmyTextField.text = "hello";\nthis.root.addChild(myTextField);\n')),(0,a.kt)("p",null,"In this code sample, ",(0,a.kt)("inlineCode",{parentName:"p"},"this.root")," points to the ",(0,a.kt)("inlineCode",{parentName:"p"},"MovieClip")," display object container that contains the code. In your actual code, you may specify a different container."),(0,a.kt)("p",null,"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"addChildAt()")," method to add the child to a specific position in the child list of the display object container. These zero-based index positions in the child list relate to the layering (the front-to-back order) of the display objects. For example, consider the following three display objects. Each object was created from a custom class called Ball."),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(6280).Z,width:"414",height:"130"})),(0,a.kt)("p",null,"The layering of these display objects in their container can be adjusted using the ",(0,a.kt)("inlineCode",{parentName:"p"},"addChildAt()")," method. For example, consider the following code:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-actionscript"},'ball_A = new Ball(0xFFCC00, "a");\nball_A.name = "ball_A";\nball_A.x = 20;\nball_A.y = 20;\ncontainer.addChild(ball_A);\n\nball_B = new Ball(0xFFCC00, "b");\nball_B.name = "ball_B";\nball_B.x = 70;\nball_B.y = 20;\ncontainer.addChild(ball_B);\n\nball_C = new Ball(0xFFCC00, "c");\nball_C.name = "ball_C";\nball_C.x = 40;\nball_C.y = 60;\ncontainer.addChildAt(ball_C, 1);\n')),(0,a.kt)("p",null,"After executing this code, the display objects are positioned as follows in the container ",(0,a.kt)("inlineCode",{parentName:"p"},"DisplayObjectContainer")," object. Notice the layering of the objects."),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(8842).Z,width:"228",height:"208"})),(0,a.kt)("p",null,"To reposition an object to the top of the display list, simply re-add it to the list. For example, after the previous code, to move ",(0,a.kt)("inlineCode",{parentName:"p"},"ball_A")," to the top of the stack, use this line of code:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-actionscript"},"container.addChild(ball_A);\n")),(0,a.kt)("p",null,"This code effectively removes ",(0,a.kt)("inlineCode",{parentName:"p"},"ball_A")," from its location in container's display list, and re-adds it to the top of the list\u2014which has the end result of moving it to the top of the stack."),(0,a.kt)("p",null,"You can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"getChildAt()")," method to verify the layer order of the display objects. The ",(0,a.kt)("inlineCode",{parentName:"p"},"getChildAt()")," method returns child objects of a container based on the index number you pass it. For example, the following code reveals names of display objects at different positions in the child list of the container ",(0,a.kt)("inlineCode",{parentName:"p"},"DisplayObjectContainer")," object:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-actionscript"},"trace(container.getChildAt(0).name); // ball_A\ntrace(container.getChildAt(1).name); // ball_C\ntrace(container.getChildAt(2).name); // ball_B\n")),(0,a.kt)("p",null,"If you remove a display object from the parent container\u2019s child list, the higher elements on the list each move down a position in the child index. For example, continuing with the previous code, the following code shows how the display object that was at position 2 in the container ",(0,a.kt)("inlineCode",{parentName:"p"},"DisplayObjectContainer")," moves to position 1 if a display object that is lower in the child list is removed:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-actionscript"},"container.removeChild(ball_C);\ntrace(container.getChildAt(0).name); // ball_A\ntrace(container.getChildAt(1).name); // ball_B\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"removeChild()")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"removeChildAt()")," methods do not delete a display object instance entirely. They simply remove it from the child list of the container. The instance can still be referenced by another variable. (Use the delete operator to completely remove an object.)"),(0,a.kt)("p",null,"Because a display object has only one parent container, you can add an instance of a display object to only one display object container. For example, the following code shows that the display object tf1 can exist in only one container (in this case, a ",(0,a.kt)("inlineCode",{parentName:"p"},"Sprite"),", which extends the ",(0,a.kt)("inlineCode",{parentName:"p"},"DisplayObjectContainer")," class):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-actionscript"},'tf1:TextField = new TextField();\ntf2:TextField = new TextField();\ntf1.name = "text 1";\ntf2.name = "text 2";\n\ncontainer1:Sprite = new Sprite();\ncontainer2:Sprite = new Sprite();\n\ncontainer1.addChild(tf1);\ncontainer1.addChild(tf2);\ncontainer2.addChild(tf1);\n\ntrace(container1.numChildren); // 1\ntrace(container1.getChildAt(0).name); // text 2\ntrace(container2.numChildren); // 1\ntrace(container2.getChildAt(0).name); // text 1\n')),(0,a.kt)("p",null,"If you add a display object that is contained in one display object container to another display object container, it is removed from the first display object container\u2019s child list."),(0,a.kt)("p",null,"In addition to the methods described above, the ",(0,a.kt)("inlineCode",{parentName:"p"},"DisplayObjectContainer")," class defines several methods for working with child display objects, including the following:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"contains()")," : Determines whether a display object is a child of a DisplayObjectContainer."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"getChildByName()")," : Retrieves a display object by name."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"getChildIndex()")," : Returns the index position of a display object."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"setChildIndex()")," : Changes the position of a child display object."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"removeChildren()")," : Removes multiple child display objects."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"swapChildren()")," : Swaps the front-to-back order of two display objects."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"swapChildrenAt()")," : Swaps the front-to-back order of two display objects, specified by their index values.")),(0,a.kt)("p",null,"For more information, see the relevant entries in the ActionScript 3.0 Reference for the Adobe Flash Platform ."),(0,a.kt)("p",null,"Recall that a display object that is off the display list\u2014one that is not included in a display object container that is a child of the Stage\u2014is known as an ",(0,a.kt)("em",{parentName:"p"},"off-list")," display object."))}h.isMDXComponent=!0},6280:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/dp_DisplayObjectContainer_layers-1-a297a63245bca387c1985ed3c477cd44.png"},8842:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/dp_DisplayObjectContainer_layers-2-2997c39a12b6d01c2fa9bdaac32d5c5c.png"},7902:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/dp_fruitGallery-41474a986d19e06ee3f9c0103cd9b38a.png"}}]);