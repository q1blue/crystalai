"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[888],{4137:(e,t,i)=>{i.d(t,{Zo:()=>s,kt:()=>m});var n=i(7294);function r(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function o(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function a(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?o(Object(i),!0).forEach((function(t){r(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function c(e,t){if(null==e)return{};var i,n,r=function(e,t){if(null==e)return{};var i,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)i=o[n],t.indexOf(i)>=0||(r[i]=e[i]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)i=o[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var l=n.createContext({}),d=function(e){var t=n.useContext(l),i=t;return e&&(i="function"==typeof e?e(t):a(a({},t),e)),i},s=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var i=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=d(i),f=r,m=p["".concat(l,".").concat(f)]||p[f]||u[f]||o;return i?n.createElement(m,a(a({ref:t},s),{},{components:i})):n.createElement(m,a({ref:t},s))}));function m(e,t){var i=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=i.length,a=new Array(o);a[0]=f;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[p]="string"==typeof e?e:r,a[1]=c;for(var d=2;d<o;d++)a[d]=i[d];return n.createElement.apply(null,a)}return n.createElement.apply(null,i)}f.displayName="MDXCreateElement"},4796:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var n=i(7462),r=(i(7294),i(4137));const o={title:"ADT -certificate",sidebar_label:"certificate",sidebar_position:6},a=void 0,c={unversionedId:"building/air-developer-tool/commands/certificate",id:"building/air-developer-tool/commands/certificate",title:"ADT -certificate",description:"The -certificate command lets you create a self-signed digital code signing certificate. The command uses the following syntax:",source:"@site/docs/building/air-developer-tool/commands/certificate.md",sourceDirName:"building/air-developer-tool/commands",slug:"/building/air-developer-tool/commands/certificate",permalink:"/docs/building/air-developer-tool/commands/certificate",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/building/air-developer-tool/commands/certificate.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"ADT -certificate",sidebar_label:"certificate",sidebar_position:6},sidebar:"mainSidebar",previous:{title:"checkstore",permalink:"/docs/building/air-developer-tool/commands/checkstore"},next:{title:"installApp",permalink:"/docs/building/air-developer-tool/commands/installApp"}},l={},d=[{value:"<code>-cn</code>",id:"-cn",level:3},{value:"<code>-ou</code>",id:"-ou",level:3},{value:"<code>-o</code>",id:"-o",level:3},{value:"<code>-c</code>",id:"-c",level:3},{value:"<code>-validityPeriod</code>",id:"-validityperiod",level:3},{value:"<code>key_type</code>",id:"key_type",level:3},{value:"<code>output</code>",id:"output",level:3},{value:"<code>password</code>",id:"password",level:3}],s={toc:d},p="wrapper";function u(e){let{components:t,...i}=e;return(0,r.kt)(p,(0,n.Z)({},s,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"-certificate")," command lets you create a self-signed digital code signing certificate. The command uses the following syntax:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"adt -certificate \n    -cn name \n    -ou orgUnit \n    -o orgName \n    -c country \n    -validityPeriod years \n    key-type \n    output \n    password\n")),(0,r.kt)("h3",{id:"-cn"},(0,r.kt)("inlineCode",{parentName:"h3"},"-cn")),(0,r.kt)("p",null,"The string assigned as the common name of the new certificate."),(0,r.kt)("h3",{id:"-ou"},(0,r.kt)("inlineCode",{parentName:"h3"},"-ou")),(0,r.kt)("p",null,"A string assigned as the organizational unit issuing the certificate. (Optional.)"),(0,r.kt)("h3",{id:"-o"},(0,r.kt)("inlineCode",{parentName:"h3"},"-o")),(0,r.kt)("p",null,"A string assigned as the organization issuing the certificate. (Optional.)"),(0,r.kt)("h3",{id:"-c"},(0,r.kt)("inlineCode",{parentName:"h3"},"-c")),(0,r.kt)("p",null,"A two-letter ISO-3166 country code. A certificate is not generated if an invalid code is supplied. (Optional.)"),(0,r.kt)("h3",{id:"-validityperiod"},(0,r.kt)("inlineCode",{parentName:"h3"},"-validityPeriod")),(0,r.kt)("p",null,"The number of years that the certificate will be valid. If not specified a validity of five years is assigned. (Optional.)"),(0,r.kt)("h3",{id:"key_type"},(0,r.kt)("inlineCode",{parentName:"h3"},"key_type")),(0,r.kt)("p",null,"The type of key to use for the certificate is 2048-RSA."),(0,r.kt)("h3",{id:"output"},(0,r.kt)("inlineCode",{parentName:"h3"},"output")),(0,r.kt)("p",null,"The path and file name for the certificate file to be generated."),(0,r.kt)("h3",{id:"password"},(0,r.kt)("inlineCode",{parentName:"h3"},"password")),(0,r.kt)("p",null,"The password for accessing the new certificate. The password is required when signing AIR files with this certificate."))}u.isMDXComponent=!0}}]);