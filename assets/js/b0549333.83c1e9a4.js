"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[9847],{4137:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(n),u=i,m=d["".concat(c,".").concat(u)]||d[u]||h[u]||r;return n?a.createElement(m,o(o({ref:t},p),{},{components:n})):a.createElement(m,o({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:i,o[1]=s;for(var l=2;l<r;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},529:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var a=n(7462),i=(n(7294),n(4137));const r={title:"Basics of the drawing API",sidebar_position:2},o=void 0,s={unversionedId:"development/display/using-the-drawing-api/basics-of-the-drawing-api",id:"development/display/using-the-drawing-api/basics-of-the-drawing-api",title:"Basics of the drawing API",description:"The drawing API is the name for the functionality built into ActionScript that allows you to create vector graphics\u2014lines, curves, shapes, fills, and gradients\u2014and display them on the screen using ActionScript. The flash.display.Graphics class provides this functionality. You can draw with ActionScript on any Shape, Sprite, or MovieClip instance, using the graphics property defined in each of those classes. (Each of those classes\u2019 graphics property is in fact an instance of the Graphics class.)",source:"@site/docs/development/display/using-the-drawing-api/basics-of-the-drawing-api.md",sourceDirName:"development/display/using-the-drawing-api",slug:"/development/display/using-the-drawing-api/basics-of-the-drawing-api",permalink:"/docs/development/display/using-the-drawing-api/basics-of-the-drawing-api",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/display/using-the-drawing-api/basics-of-the-drawing-api.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Basics of the drawing API",sidebar_position:2},sidebar:"mainSidebar",previous:{title:"Overview",permalink:"/docs/development/display/using-the-drawing-api/"},next:{title:"The Graphics class",permalink:"/docs/development/display/using-the-drawing-api/the-graphics-class"}},c={},l=[{value:"Important concepts and terms",id:"important-concepts-and-terms",level:3}],p={toc:l},d="wrapper";function h(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The drawing API is the name for the functionality built into ActionScript that allows you to create vector graphics\u2014lines, curves, shapes, fills, and gradients\u2014and display them on the screen using ActionScript. The flash.display.Graphics class provides this functionality. You can draw with ActionScript on any Shape, Sprite, or MovieClip instance, using the graphics property defined in each of those classes. (Each of those classes\u2019 ",(0,i.kt)("inlineCode",{parentName:"p"},"graphics")," property is in fact an instance of the Graphics class.)"),(0,i.kt)("p",null,"If you\u2019re just getting started with drawing with code, the Graphics class includes several methods that make it easy to draw common shapes like circles, ellipses, rectangles, and rectangles with rounded corners. You can draw them as empty lines or filled shapes. When you need more advanced functionality, the Graphics class also includes methods for drawing lines and quadratic B\xe9zier curves, which you can use in conjunction with the trigonometry functions in the Math class to create any shape you need."),(0,i.kt)("p",null,'Flash runtimes (such as Flash Player 10 and Adobe AIR 1.5 and later versions) add an additional API for drawing, which allow you to programmatically draw entire shapes with a single command. Once you\u2019re familiar with the Graphics class and tasks covered in "Basics of using the drawing API", continue to Advanced use of the drawing API to learn more about these drawing API features.'),(0,i.kt)("h3",{id:"important-concepts-and-terms"},"Important concepts and terms"),(0,i.kt)("p",null,"The following reference list contains important terms that you will encounter while using the drawing API:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Anchor point")," One of the two end points of a quadratic B\xe9zier curve."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Control point")," The point that defines the direction and amount of curve of a quadratic B\xe9zier curve. The curved line never reaches the control point; however, the line curves as though being drawn toward the control point."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Coordinate space")," The graph of coordinates contained in a display object, on which its child elements are positioned."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Fill")," The solid inner portion of a shape that has a line filled in with color, or all of a shape that has no outline."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Gradient")," A color that consists of a gradual transition from one color to one or more other colors (as opposed to a solid color)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Point")," A single location in a coordinate space. In the 2-d coordinate system used in ActionScript, a point is defined by its location along the x axis and the y axis (the point\u2019s coordinates)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Quadratic B\xe9zier curve")," A type of curve defined by a particular mathematical formula. In this type of curve, the shape of the curve is calculated based on the positions of the anchor points (the end points of the curve) and a control point that defines the amount and direction of the curve."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Scale")," The size of an object relative to its original size. When used as a verb, to scale an object means to change its size by stretching or shrinking the object."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Stroke")," The outline portion of a shape that has a line filled in with color, or the lines of an un-filled shape."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Translate")," To change a point\u2019s coordinates from one coordinate space to another."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"X axis")," The horizontal axis in the 2-d coordinate system used in ActionScript."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Y axis")," The vertical axis in the 2-d coordinate system used in ActionScript.")))}h.isMDXComponent=!0}}]);