"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[7897],{4137:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>u});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),p=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(a),y=n,u=m["".concat(l,".").concat(y)]||m[y]||d[y]||o;return a?r.createElement(u,i(i({ref:t},c),{},{components:a})):r.createElement(u,i({ref:t},c))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=y;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:n,i[1]=s;for(var p=2;p<o;p++)i[p]=a[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}y.displayName="MDXCreateElement"},5039:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=a(7462),n=(a(7294),a(4137));const o={title:"Using Matrix objects",sidebar_position:5},i=void 0,s={unversionedId:"development/display/working-with-geometry/using-matrix-objects",id:"development/display/working-with-geometry/using-matrix-objects",title:"Using Matrix objects",description:"The Matrix class represents a transformation matrix that determines how to map points from one coordinate space to another. You can perform various graphical transformations on a display object by setting the properties of a Matrix object, applying that Matrix object to the matrix property of a Transform object, and then applying that Transform object as the transform property of the display object. These transformation functions include translation ( x and y repositioning), rotation, scaling, and skewing.",source:"@site/docs/development/display/working-with-geometry/using-matrix-objects.md",sourceDirName:"development/display/working-with-geometry",slug:"/development/display/working-with-geometry/using-matrix-objects",permalink:"/docs/development/display/working-with-geometry/using-matrix-objects",draft:!1,editUrl:"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/display/working-with-geometry/using-matrix-objects.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Using Matrix objects",sidebar_position:5},sidebar:"mainSidebar",previous:{title:"Using Rectangle objects",permalink:"/docs/development/display/working-with-geometry/using-rectangle-objects"},next:{title:"Overview",permalink:"/docs/development/display/using-the-drawing-api/"}},l={},p=[],c={toc:p},m="wrapper";function d(e){let{components:t,...a}=e;return(0,n.kt)(m,(0,r.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"The Matrix class represents a transformation matrix that determines how to map points from one coordinate space to another. You can perform various graphical transformations on a display object by setting the properties of a Matrix object, applying that Matrix object to the ",(0,n.kt)("inlineCode",{parentName:"p"},"matrix")," property of a ",(0,n.kt)("inlineCode",{parentName:"p"},"Transform")," object, and then applying that Transform object as the ",(0,n.kt)("inlineCode",{parentName:"p"},"transform")," property of the display object. These transformation functions include translation ( x and y repositioning), rotation, scaling, and skewing."),(0,n.kt)("p",null,"Although you could define a matrix by directly adjusting the properties ( ",(0,n.kt)("inlineCode",{parentName:"p"},"a")," , ",(0,n.kt)("inlineCode",{parentName:"p"},"b")," , ",(0,n.kt)("inlineCode",{parentName:"p"},"c")," , ",(0,n.kt)("inlineCode",{parentName:"p"},"d")," , ",(0,n.kt)("inlineCode",{parentName:"p"},"tx")," , ",(0,n.kt)("inlineCode",{parentName:"p"},"ty")," ) of a ",(0,n.kt)("inlineCode",{parentName:"p"},"Matrix")," object, it is easier to use the ",(0,n.kt)("inlineCode",{parentName:"p"},"createBox()")," method. This method includes parameters that let you directly define the scaling, rotation, and translation effects of the resulting matrix. For example, the following code creates a Matrix object that scales an object horizontally by 2.0, scales it vertically by 3.0, rotates it by 45\xb0, moving (translating) it 10 pixels to the right, and moving it 20 pixels down:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-actionscript"},"var matrix:Matrix = new Matrix();\nvar scaleX:Number = 2.0;\nvar scaleY:Number = 3.0;\nvar rotation:Number = 2 _ Math.PI _ (45 / 360);\nvar tx:Number = 10;\nvar ty:Number = 20;\nmatrix.createBox(scaleX, scaleY, rotation, tx, ty);\n")),(0,n.kt)("p",null,"You can also adjust the scaling, rotation, and translation effects of a Matrix object by using the ",(0,n.kt)("inlineCode",{parentName:"p"},"scale()")," , ",(0,n.kt)("inlineCode",{parentName:"p"},"rotate()")," , and ",(0,n.kt)("inlineCode",{parentName:"p"},"translate()")," methods. Note that these methods combine with the values of the existing Matrix object. For example, the following code sets a Matrix object that scales an object by a factor of 4 and rotates it 60\xb0, since the ",(0,n.kt)("inlineCode",{parentName:"p"},"scale()")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"rotate()")," methods are called twice:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-actionscript"},"var matrix:Matrix = new Matrix();\nvar rotation:Number = 2 _ Math.PI _ (30 / 360); // 30\xb0\nvar scaleFactor:Number = 2;\nmatrix.scale(scaleFactor, scaleFactor);\nmatrix.rotate(rotation);\nmatrix.scale(scaleX, scaleY);\nmatrix.rotate(rotation);\n\nmyDisplayObject.transform.matrix = matrix;\n")),(0,n.kt)("p",null,"To apply a skew transformation to a Matrix object, adjust its ",(0,n.kt)("inlineCode",{parentName:"p"},"b")," or ",(0,n.kt)("inlineCode",{parentName:"p"},"c")," property. Adjusting the ",(0,n.kt)("inlineCode",{parentName:"p"},"b")," property skews the matrix vertically, and adjusting the ",(0,n.kt)("inlineCode",{parentName:"p"},"c")," property skews the matrix horizontally. The following code skews the ",(0,n.kt)("inlineCode",{parentName:"p"},"myMatrix")," Matrix object vertically by a factor of 2:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-actionscript"},"var skewMatrix:Matrix = new Matrix();\nskewMatrix.b = Math.tan(2);\nmyMatrix.concat(skewMatrix);\n")),(0,n.kt)("p",null,"You can apply a Matrix transformation to the ",(0,n.kt)("inlineCode",{parentName:"p"},"transform")," property of a display object. For example, the following code applies a matrix transformation to a display object named ",(0,n.kt)("inlineCode",{parentName:"p"},"myDisplayObject")," :"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-actionscript"},"var matrix:Matrix = myDisplayObject.transform.matrix;\nvar scaleFactor:Number = 2;\nvar rotation:Number = 2 _ Math.PI _ (60 / 360); // 60\xb0\nmatrix.scale(scaleFactor, scaleFactor);\nmatrix.rotate(rotation);\n\nmyDisplayObject.transform.matrix = matrix;\n")),(0,n.kt)("p",null,"The first line sets a Matrix object to the existing transformation matrix used by the ",(0,n.kt)("inlineCode",{parentName:"p"},"myDisplayObject")," display object (the ",(0,n.kt)("inlineCode",{parentName:"p"},"matrix")," property of the transformation property of the ",(0,n.kt)("inlineCode",{parentName:"p"},"myDisplayObject")," display object). This way, the Matrix class methods that you call have a cumulative effect on the display object\u2019s existing position, scale, and rotation."),(0,n.kt)("p",null,"Note: The ColorTransform class is also included in the flash.geometry package. This class is used to set the colorTransform property of a Transform object. Since it does not apply any geometrical transformation, it is not discussed, in detail, here."))}d.isMDXComponent=!0}}]);